"""
This module contains the base Audio class and
the derived classes Song, Podcast and Audiobook.
"""
import json
from datetime import datetime
from dataclasses import dataclass


class AudioMetadataError(Exception):
    """Custom exception to handle invalid metadata values"""
    pass


@dataclass(repr=False)
class Audio:
    """
    The base class for all other Audio type classes.

    Accepts a metadata dictionary and stores it as an attribute.
    The post construction initialisation runtime checks the
    metadata for the other relevant attributes and sets them.

    Attributes:
        metadata:   A dict that contains the audio file metadata.
        id:         An int that uniquely identifies the audio file.
        name:       An str that describes the name of the audio file.
        duration:   A positive int that describes the length of the audio file.
        uploadtime: A DateTime object that describes the time at which the object was created.

    The ID of the audio file is generated by hashing the name,
    duration and uploadtime attributes.
    The uploadtime attribute is generated at the time of object
    creation.
    """
    metadata: dict

    def __post_init__(self):
        """ Post Construction Initialisation Runtime """
        try:
            self.name = self.metadata['name']
            self.duration = self.metadata['duration']

        except KeyError as e:
            raise AudioMetadataError(f"missing {e} metadata value")

        self.uploadtime = datetime.utcnow()
        self.metadata['uploadtime'] = self.uploadtime.isoformat()
        self.id = abs(hash(f"{self.name}-{self.duration}-{self.uploadtime}"))

        if type(self.name) is not str:
            raise AudioMetadataError("invalid 'name' metadata value - not a str")

        if len(self.name) > 100:
            raise AudioMetadataError("invalid 'name' metadata value - longer than 100")

        if type(self.duration) is not int:
            raise AudioMetadataError("invalid 'duration' metadata value - not an int")

        if self.duration < 0:
            raise AudioMetadataError("invalid 'duration' metadata value - not positive")

        self.metadata['type'] = "Audio"

    def __repr__(self):
        """ Representation of an Audio Object """
        return f"Audio Object <ID={self.id}, Name={self.name}>"

    def __str__(self):
        """ String Representation of an Audio Object """
        return json.dumps(self.metadata)


@dataclass(repr=False)
class Song(Audio):
    """
    The class for a Song object.

    Accepts a metadata dictionary and stores it as an attribute.
    The post construction initialisation runtime checks the
    metadata for the other relevant attributes and sets them.

    Attributes:
        metadata:   A dict that contains the song file metadata.
        id:         An int that uniquely identifies the song file.
        name:       An str that describes the name of the song file.
        duration:   A positive int that describes the length of the song file.
        uploadtime: A DateTime object that describes the time at which the object was created.

    The ID of the audio file is generated by hashing the name,
    duration and uploadtime attributes.
    The uploadtime attribute is generated at the time of object
    creation.
    """
    metadata: dict

    def __post_init__(self):
        """ Post Construction Initialisation Runtime """
        super(Song, self).__post_init__()
        self.metadata['type'] = "Song"

    def __repr__(self):
        """ Representation of an Song Object """
        return f"Song Object <ID={self.id}, Name={self.name}>"

    def __str__(self):
        """ String Representation of an Song Object """
        return json.dumps(self.metadata)


@dataclass(repr=False)
class Podcast(Audio):
    """
    The class for a Podcast object.

    Accepts a metadata dictionary and stores it as an attribute.
    The post construction initialisation runtime checks the
    metadata for the other relevant attributes and sets them.

    Attributes:
        metadata:   A dict that contains the podcast file metadata.
        id:         An int that uniquely identifies the podcast file.
        name:       An str that describes the name of the podcast file.
        host:       An str that describes the host of the podcast file.
        duration:   A positive int that describes the length of the podcast file.
        uploadtime: A DateTime object that describes the time at which the object was created.
        participants:   A list of str that describes the participants of the podcast file.

    The ID of the audio file is generated by hashing the name,
    duration and uploadtime attributes.

    The uploadtime attribute is generated at the time of object
    creation.
    """
    metadata: dict

    def __post_init__(self):
        """ Post Construction Initialisation Runtime """
        super(Podcast, self).__post_init__()

        try:
            self.host = self.metadata['host']
            self.participants = self.metadata.get('participants')

        except KeyError as e:
            raise AudioMetadataError(f"missing {e} metadata value")

        if type(self.host) is not str:
            raise AudioMetadataError("invalid 'host' metadata value - not an str")

        if len(self.host) > 100:
            raise AudioMetadataError("invalid 'host' metadata value - longer than 100")

        if not self.participants:
            self.participants = []

        if type(self.participants) is not list:
            raise AudioMetadataError("invalid 'participants' metadata value - not a list")

        for count, participant in enumerate(self.participants):
            if type(participant) is not str:
                raise AudioMetadataError(f"invalid 'participants' metadata value - value {count} not an str")

            if len(self.host) > 100:
                raise AudioMetadataError(f"invalid 'participants' metadata value - value {count} longer than 100")

        self.metadata['type'] = "Podcast"

    def __repr__(self):
        """ Representation of an Podcast Object """
        return f"Podcast Object <ID={self.id}, Name={self.name}>"

    def __str__(self):
        """ String Representation of an Podcast Object """
        return json.dumps(self.metadata)


@dataclass(repr=False)
class Audiobook(Audio):
    """
    The class for a Audiobook object.

    Accepts a metadata dictionary and stores it as an attribute.
    The post construction initialisation runtime checks the
    metadata for the other relevant attributes and sets them.

    Attributes:
        metadata:   A dict that contains the audiobook file metadata.
        id:         An int that uniquely identifies the audiobook file.
        name:       An str that describes the name of the audiobook file.
        author:     An str that describes the author of the audiobook file.
        narrator:   An str that describes the narrator of the audiobook file.
        duration:   A positive int that describes the length of the audiobook file.
        uploadtime: A DateTime object that describes the time at which the object was created.

    The ID of the audio file is generated by hashing the name,
    duration and uploadtime attributes.
    The uploadtime attribute is generated at the time of object
    creation.
    """

    metadata: dict

    def __post_init__(self):
        """ Post Construction Initialisation Runtime """
        super(Audiobook, self).__post_init__()

        try:
            self.author = self.metadata['author']
            self.narrator = self.metadata['narrator']

        except KeyError as e:
            raise AudioMetadataError(f"missing {e} metadata value")

        if type(self.author) is not str:
            raise AudioMetadataError("invalid 'author' metadata value - not an str")

        if len(self.author) > 100:
            raise AudioMetadataError("invalid 'author' metadata value - longer than 100")

        if type(self.narrator) is not str:
            raise AudioMetadataError("invalid 'narrator' metadata value - not an str")

        if len(self.narrator) > 100:
            raise AudioMetadataError("invalid 'narrator' metadata value - longer than 100")

        self.metadata['type'] = "Audiobook"

    def __repr__(self):
        """ Representation of an Audiobook Object """
        return f"Audiobook Object <ID={self.id}, Name={self.name}>"

    def __str__(self):
        """ String Representation of an Audiobook Object """
        return json.dumps(self.metadata)
